## env: 현 위치의 env는 이 파일의 글로벌 변수
env: 
  BE_PROJ_NM: letsSeoul

## name: 이 workflow의 이름
name: LetsSeoul main/dev CI/CD

## on: 이 workflow가 언제 실행될 건지
on:
  pull_request:
    branches: [ "main", "dev" ]
  push:
    branches: [ "dev" ]

## jobs: 이 workflow 안에서 실행되는 작업들의 단위
jobs:

  backend:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    defaults:
      run:
        shell: bash
        working-directory: backend/$BE_PROJ_NM

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: zulu
        cache: 'gradle'
        
#     - name: cache gradle
#       uses: actions/cache@v3
#       with:
#         path: |
#           .gradle/caches
#           .gradle/wrapper
#         key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#         restore-keys: |
#           ${{ runner.os }}-gradle-
    
    - name: Execute gradle bootJar
      run: |
        chmod +x ./gradlew
        ./gradlew bootJar
      
    - name: move to build/libs
      run: |
        cd build/libs
        pwd
        ls -al
        
    - name: scp-ssh-pipelines
      uses: cross-the-world/ssh-scp-ssh-pipelines@latest
      with:
        host: ${{ secrets.SERVER_HOST }}
        user: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        first_ssh: echo "BE 배포 시작"
        scp: ./backend/letsSeoulApp/build/libs/* => ${{ secrets.SERVER_BUILD_PATH_APP }}
        last_ssh: |
          cd backend
          ./deploy.sh
          echo "BE 배포 결과 확인 : "
          ls -al
  
  frontend:
  
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    defaults:
      run:
        shell: bash
        working-directory: frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      ## node modules 캐싱
#       - name: Cache node modules
#         uses: actions/cache@v3
#         env:
#           cache-name: cache-node-modules
#         with:
#           path: ~/.npm
#           key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-build-${{ env.cache-name }}-
#             ${{ runner.os }}-build-
#             ${{ runner.os }}-

      - name: Install Dependencies
        run: npm install 

      ## react build
      - name: Build
        run: npm run build
        
      - name: pwd & ls -al
        run: |
          pwd
          ls -al
          
      - name: scp-ssh-pipelines
        uses: cross-the-world/ssh-scp-ssh-pipelines@latest
        with:
          host: ${{ secrets.SERVER_HOST }}
          user: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          first_ssh: echo "FE 배포 시작"
          scp: ./frontend/build/* => ${{ secrets.SERVER_BUILD_PATH_WEB }}
          last_ssh: |
            cd frontend
            echo "FE 배포 결과 확인 "
            ls -al
